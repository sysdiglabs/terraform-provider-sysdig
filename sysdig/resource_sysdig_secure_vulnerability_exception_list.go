package sysdig

import (
	"context"
	"time"

	v2 "github.com/draios/terraform-provider-sysdig/sysdig/internal/client/v2"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceSysdigSecureVulnerabilityExceptionList() *schema.Resource {
	timeout := 5 * time.Minute

	return &schema.Resource{
		DeprecationMessage: "The legacy scanning engine has been deprecated. This resource will be removed in future releases.",
		CreateContext:      resourceSysdigVulnerabilityExceptionListCreate,
		ReadContext:        resourceSysdigVulnerabilityExceptionListRead,
		UpdateContext:      resourceSysdigVulnerabilityExceptionListUpdate,
		DeleteContext:      resourceSysdigVulnerabilityExceptionListDelete,
		Importer: &schema.ResourceImporter{
			StateContext: schema.ImportStatePassthroughContext,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(timeout),
			Delete: schema.DefaultTimeout(timeout),
			Update: schema.DefaultTimeout(timeout),
			Read:   schema.DefaultTimeout(timeout),
		},

		Schema: map[string]*schema.Schema{
			"name": {
				Type:     schema.TypeString,
				Required: true,
			},
			"description": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func getSecureSecureVulnerabilityExceptionListClient(c SysdigClients) (v2.VulnerabilityExceptionListInterface, error) {
	return c.sysdigSecureClientV2()
}

func resourceSysdigVulnerabilityExceptionListCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureSecureVulnerabilityExceptionListClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	list, err := vulnerabilityExceptionListFromResourceData(d)
	if err != nil {
		return diag.FromErr(err)
	}

	list, err = client.CreateVulnerabilityExceptionList(ctx, list)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(list.ID)

	return nil
}

func resourceSysdigVulnerabilityExceptionListRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureSecureVulnerabilityExceptionListClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	list, err := client.GetVulnerabilityExceptionListByID(ctx, d.Id())
	if err != nil {
		d.SetId("")
		return diag.FromErr(err)
	}

	err = vulnerabilityExceptionListToResourceData(list, d)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceSysdigVulnerabilityExceptionListDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureSecureVulnerabilityExceptionListClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	err = client.DeleteVulnerabilityExceptionList(ctx, d.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceSysdigVulnerabilityExceptionListUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureSecureVulnerabilityExceptionListClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	list, err := vulnerabilityExceptionListFromResourceData(d)
	if err != nil {
		return diag.FromErr(err)
	}

	_, err = client.UpdateVulnerabilityExceptionList(ctx, list)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func vulnerabilityExceptionListFromResourceData(d *schema.ResourceData) (*v2.VulnerabilityExceptionList, error) {
	list := &v2.VulnerabilityExceptionList{
		Version: "1_0",
		Name:    d.Get("name").(string),
	}
	if id := d.Id(); id != "" {
		list.ID = id
	}
	if comment, ok := d.GetOk("description"); ok {
		list.Comment = comment.(string)
	}

	return list, nil
}

func vulnerabilityExceptionListToResourceData(list *v2.VulnerabilityExceptionList, d *schema.ResourceData) error {
	if list.ID != "" {
		d.SetId(list.ID)
	}

	_ = d.Set("name", list.Name)
	if list.Comment != "" {
		_ = d.Set("description", list.Comment)
	}

	return nil
}
