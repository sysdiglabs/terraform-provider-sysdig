package v2

import (
	"context"
	"fmt"
	"net/http"
)

const (
	createDeprecatedVulnerabilityExceptionListPath = "%s/api/scanning/v1/vulnexceptions"
	getDeprecatedVulnerabilityExceptionListPath    = "%s/api/scanning/v1/vulnexceptions/%s"
	deleteDeprecatedVulnerabilityExceptionListPath = "%s/api/scanning/v1/vulnexceptions/%s"
	updateDeprecatedVulnerabilityExceptionListPath = "%s/api/scanning/v1/vulnexceptions/%s"

	createDeprecatedVulnerabilityExceptionPath = "%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities"
	getDeprecatedVulnerabilityExceptionPath    = "%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities/%s/"
	deleteDeprecatedVulnerabilityExceptionPath = "%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities/%s/"
	updateDeprecatedVulnerabilityExceptionPath = "%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities/%s/"
)

type DeprecatedVulnerabilityExceptionListInterface interface {
	Base
	CreateDeprecatedVulnerabilityExceptionList(ctx context.Context, list *DeprecatedVulnerabilityExceptionList) (*DeprecatedVulnerabilityExceptionList, error)
	GetDeprectedVulnerabilityExceptionListByID(ctx context.Context, id string) (*DeprecatedVulnerabilityExceptionList, error)
	DeleteDeprecatedVulnerabilityExceptionList(ctx context.Context, id string) error
	UpdateDeprecatedVulnerabilityExceptionList(ctx context.Context, list *DeprecatedVulnerabilityExceptionList) (*DeprecatedVulnerabilityExceptionList, error)
}

type DeprecatedVulnerabilityExceptionInterface interface {
	Base
	CreateDeprecatedVulnerabilityException(ctx context.Context, listID string, exception *DeprecatedVulnerabilityException) (*DeprecatedVulnerabilityException, error)
	GetDeprecatedVulnerabilityExceptionByID(ctx context.Context, listID string, exceptionID string) (*DeprecatedVulnerabilityException, error)
	DeleteDeprecatedVulnerabilityException(ctx context.Context, listID string, exceptionID string) error
	UpdateDeprecatedVulnerabilityException(ctx context.Context, listID string, exception *DeprecatedVulnerabilityException) (*DeprecatedVulnerabilityException, error)
}

func (c *Client) CreateDeprecatedVulnerabilityExceptionList(ctx context.Context, list *DeprecatedVulnerabilityExceptionList) (createdList *DeprecatedVulnerabilityExceptionList, err error) {
	payload, err := Marshal(list)
	if err != nil {
		return nil, err
	}

	response, err := c.requester.Request(ctx, http.MethodPost, c.createDeprecatedVulnerabilityExceptionListURL(), payload)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityExceptionList](response.Body)
}

func (c *Client) GetDeprectedVulnerabilityExceptionListByID(ctx context.Context, id string) (list *DeprecatedVulnerabilityExceptionList, err error) {
	response, err := c.requester.Request(ctx, http.MethodGet, c.getDeprecatedVulnerabilityExceptionListURL(id), nil)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityExceptionList](response.Body)
}

func (c *Client) DeleteDeprecatedVulnerabilityExceptionList(ctx context.Context, id string) (err error) {
	response, err := c.requester.Request(ctx, http.MethodDelete, c.deleteDeprecatedVulnerabilityExceptionListURL(id), nil)
	if err != nil {
		return err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK && response.StatusCode != http.StatusNotFound {
		return c.ErrorFromResponse(response)
	}

	return nil
}

func (c *Client) UpdateDeprecatedVulnerabilityExceptionList(ctx context.Context, list *DeprecatedVulnerabilityExceptionList) (updatedList *DeprecatedVulnerabilityExceptionList, err error) {
	payload, err := Marshal(list)
	if err != nil {
		return nil, err
	}

	response, err := c.requester.Request(ctx, http.MethodPut, c.updateDeprecatedVulnerabilityExceptionListURL(list.ID), payload)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityExceptionList](response.Body)
}

func (c *Client) CreateDeprecatedVulnerabilityException(ctx context.Context, listID string, exception *DeprecatedVulnerabilityException) (createdException *DeprecatedVulnerabilityException, err error) {
	payload, err := Marshal(exception)
	if err != nil {
		return nil, err
	}

	response, err := c.requester.Request(ctx, http.MethodPost, c.createDeprecatedVulnerabilityExceptionURL(listID), payload)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityException](response.Body)
}

func (c *Client) GetDeprecatedVulnerabilityExceptionByID(ctx context.Context, listID string, exceptionID string) (exception *DeprecatedVulnerabilityException, err error) {
	response, err := c.requester.Request(ctx, http.MethodGet, c.getDeprecatedVulnerabilityExceptionURL(listID, exceptionID), nil)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityException](response.Body)
}

func (c *Client) DeleteDeprecatedVulnerabilityException(ctx context.Context, listID string, exceptionID string) (err error) {
	response, err := c.requester.Request(ctx, http.MethodDelete, c.deleteDeprecatedVulnerabilityExceptionURL(listID, exceptionID), nil)
	if err != nil {
		return err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	// We will ignore the 404 error, because the exception may have been removed if the exception list has been
	// removed as well. This should not affect the user, because removing a non existing exception has no effect.
	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK && response.StatusCode != http.StatusNotFound {
		return c.ErrorFromResponse(response)
	}

	return nil
}

func (c *Client) UpdateDeprecatedVulnerabilityException(ctx context.Context, listID string, exception *DeprecatedVulnerabilityException) (updatedException *DeprecatedVulnerabilityException, err error) {
	payload, err := Marshal(exception)
	if err != nil {
		return nil, err
	}

	response, err := c.requester.Request(ctx, http.MethodPut, c.updateDeprecatedVulnerabilityExceptionURL(listID, exception.ID), payload)
	if err != nil {
		return nil, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, c.ErrorFromResponse(response)
	}

	return Unmarshal[*DeprecatedVulnerabilityException](response.Body)
}

func (c *Client) createDeprecatedVulnerabilityExceptionListURL() string {
	return fmt.Sprintf(createDeprecatedVulnerabilityExceptionListPath, c.config.url)
}

func (c *Client) getDeprecatedVulnerabilityExceptionListURL(id string) string {
	return fmt.Sprintf(getDeprecatedVulnerabilityExceptionListPath, c.config.url, id)
}

func (c *Client) deleteDeprecatedVulnerabilityExceptionListURL(id string) string {
	return fmt.Sprintf(deleteDeprecatedVulnerabilityExceptionListPath, c.config.url, id)
}

func (c *Client) updateDeprecatedVulnerabilityExceptionListURL(id string) string {
	return fmt.Sprintf(updateDeprecatedVulnerabilityExceptionListPath, c.config.url, id)
}

func (c *Client) createDeprecatedVulnerabilityExceptionURL(listID string) string {
	return fmt.Sprintf(createDeprecatedVulnerabilityExceptionPath, c.config.url, listID)
}

func (c *Client) getDeprecatedVulnerabilityExceptionURL(listID, ID string) string {
	return fmt.Sprintf(getDeprecatedVulnerabilityExceptionPath, c.config.url, listID, ID)
}

func (c *Client) deleteDeprecatedVulnerabilityExceptionURL(listID, ID string) string {
	return fmt.Sprintf(deleteDeprecatedVulnerabilityExceptionPath, c.config.url, listID, ID)
}

func (c *Client) updateDeprecatedVulnerabilityExceptionURL(listID, ID string) string {
	return fmt.Sprintf(updateDeprecatedVulnerabilityExceptionPath, c.config.url, listID, ID)
}
