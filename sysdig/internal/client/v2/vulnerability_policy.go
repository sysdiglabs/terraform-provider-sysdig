package v2

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strconv"
)

const (
	vulnerabilityPoliciesPath = "%s/secure/vulnerability/v1/policies"
	vulnerabilityPolicyPath   = "%s/secure/vulnerability/v1/policies/%s"
)

type VulnerabilityPolicyClient interface {
	CreateVulnerabilityPolicy(ctx context.Context, vulnerabilityPolicy VulnerabilityPolicy) (VulnerabilityPolicy, error)
	GetVulnerabilityPolicyByID(ctx context.Context, vulnerabilityPolicyID string) (VulnerabilityPolicy, error)
	UpdateVulnerabilityPolicy(ctx context.Context, vulnerabilityPolicy VulnerabilityPolicy) (VulnerabilityPolicy, error)
	DeleteVulnerabilityPolicyByID(ctx context.Context, vulnerabilityPolicyID string) error
}

func (c *Client) CreateVulnerabilityPolicy(ctx context.Context, vulnerabilityPolicy VulnerabilityPolicy) (policy VulnerabilityPolicy, err error) {
	payload, err := Marshal(vulnerabilityPolicy)
	if err != nil {
		return VulnerabilityPolicy{}, err
	}

	response, err := c.requester.Request(ctx, http.MethodPost, c.vulnerabilityPoliciesURL(), payload)
	if err != nil {
		return VulnerabilityPolicy{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return VulnerabilityPolicy{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityPolicy](response.Body)
}

func (c *Client) GetVulnerabilityPolicyByID(ctx context.Context, vulnerabilityPolicyID string) (policy VulnerabilityPolicy, err error) {
	response, err := c.requester.Request(ctx, http.MethodGet, c.vulnerabilityPolicyURL(vulnerabilityPolicyID), nil)
	if err != nil {
		return VulnerabilityPolicy{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return VulnerabilityPolicy{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityPolicy](response.Body)
}

func (c *Client) UpdateVulnerabilityPolicy(ctx context.Context, vulnerabilityPolicy VulnerabilityPolicy) (policy VulnerabilityPolicy, err error) {
	if vulnerabilityPolicy.ID == nil {
		return VulnerabilityPolicy{}, errors.New("policy id was null")
	}

	payload, err := Marshal(vulnerabilityPolicy)
	if err != nil {
		return VulnerabilityPolicy{}, err
	}

	idAsStr := strconv.Itoa(int(*vulnerabilityPolicy.ID))
	response, err := c.requester.Request(ctx, http.MethodPut, c.vulnerabilityPolicyURL(idAsStr), payload)
	if err != nil {
		return VulnerabilityPolicy{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return VulnerabilityPolicy{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityPolicy](response.Body)
}

func (c *Client) DeleteVulnerabilityPolicyByID(ctx context.Context, vulnerabilityPolicyID string) (err error) {
	response, err := c.requester.Request(ctx, http.MethodDelete, c.vulnerabilityPolicyURL(vulnerabilityPolicyID), nil)
	if err != nil {
		return err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK {
		return c.ErrorFromResponse(response)
	}

	return err
}

func (c *Client) vulnerabilityPoliciesURL() string {
	return fmt.Sprintf(vulnerabilityPoliciesPath, c.config.url)
}

func (c *Client) vulnerabilityPolicyURL(vulnerabilityPolicyID string) string {
	return fmt.Sprintf(vulnerabilityPolicyPath, c.config.url, vulnerabilityPolicyID)
}
