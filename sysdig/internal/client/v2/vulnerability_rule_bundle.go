package v2

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"strconv"
)

const (
	vulnerabilityRuleBundlesPath = "%s/secure/vulnerability/v1/bundles"
	vulnerabilityRuleBundlePath  = "%s/secure/vulnerability/v1/bundles/%s"
)

type VulnerabilityRuleBundleClient interface {
	CreateVulnerabilityRuleBundle(ctx context.Context, vulnerabilityRuleBundle VulnerabilityRuleBundle) (VulnerabilityRuleBundle, error)
	GetVulnerabilityRuleBundleByID(ctx context.Context, vulnerabilityRuleBundleID string) (VulnerabilityRuleBundle, error)
	UpdateVulnerabilityRuleBundle(ctx context.Context, vulnerabilityRuleBundle VulnerabilityRuleBundle) (VulnerabilityRuleBundle, error)
	DeleteVulnerabilityRuleBundleByID(ctx context.Context, vulnerabilityRuleBundleID string) error
}

func (c *Client) CreateVulnerabilityRuleBundle(ctx context.Context, vulnerabilityRuleBundle VulnerabilityRuleBundle) (ruleBundle VulnerabilityRuleBundle, err error) {
	payload, err := Marshal(vulnerabilityRuleBundle)
	if err != nil {
		return VulnerabilityRuleBundle{}, err
	}

	response, err := c.requester.Request(ctx, http.MethodPost, c.vulnerabilityRuleBundlesURL(), payload)
	if err != nil {
		return VulnerabilityRuleBundle{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return VulnerabilityRuleBundle{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityRuleBundle](response.Body)
}

func (c *Client) GetVulnerabilityRuleBundleByID(ctx context.Context, vulnerabilityRuleBundleID string) (ruleBundle VulnerabilityRuleBundle, err error) {
	response, err := c.requester.Request(ctx, http.MethodGet, c.vulnerabilityRuleBundleURL(vulnerabilityRuleBundleID), nil)
	if err != nil {
		return VulnerabilityRuleBundle{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return VulnerabilityRuleBundle{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityRuleBundle](response.Body)
}

func (c *Client) UpdateVulnerabilityRuleBundle(ctx context.Context, vulnerabilityRuleBundle VulnerabilityRuleBundle) (ruleBundle VulnerabilityRuleBundle, err error) {
	if vulnerabilityRuleBundle.ID == nil {
		return VulnerabilityRuleBundle{}, errors.New("rule bundle id was null")
	}

	payload, err := Marshal(vulnerabilityRuleBundle)
	if err != nil {
		return VulnerabilityRuleBundle{}, err
	}

	idAsStr := strconv.Itoa(int(*vulnerabilityRuleBundle.ID))
	response, err := c.requester.Request(ctx, http.MethodPut, c.vulnerabilityRuleBundleURL(idAsStr), payload)
	if err != nil {
		return VulnerabilityRuleBundle{}, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return VulnerabilityRuleBundle{}, c.ErrorFromResponse(response)
	}

	return Unmarshal[VulnerabilityRuleBundle](response.Body)
}

func (c *Client) DeleteVulnerabilityRuleBundleByID(ctx context.Context, vulnerabilityRuleBundleID string) (err error) {
	response, err := c.requester.Request(ctx, http.MethodDelete, c.vulnerabilityRuleBundleURL(vulnerabilityRuleBundleID), nil)
	if err != nil {
		return err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK {
		return c.ErrorFromResponse(response)
	}

	return err
}

func (c *Client) vulnerabilityRuleBundlesURL() string {
	return fmt.Sprintf(vulnerabilityRuleBundlesPath, c.config.url)
}

func (c *Client) vulnerabilityRuleBundleURL(vulnerabilityRuleBundleID string) string {
	return fmt.Sprintf(vulnerabilityRuleBundlePath, c.config.url, vulnerabilityRuleBundleID)
}
