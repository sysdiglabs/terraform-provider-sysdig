package v2

import (
	"fmt"
	"time"
)

type (
	EntityType  string
	ReasonType  string
	StatusType  string
	StageType   string
	ContextType string
)

const (
	EntityTypeImageName         EntityType = "imageName"
	EntityTypeImagePrefix       EntityType = "imagePrefix"
	EntityTypeImageSuffix       EntityType = "imageSuffix"
	EntityTypeImageNameContains EntityType = "imageNameContains"
	EntityTypeVulnerability     EntityType = "vulnerability"
	EntityTypeHostName          EntityType = "hostName"
	EntityTypeHostNameContains  EntityType = "hostNameContains"
	EntityTypePolicyRule        EntityType = "policyRule"
)

const (
	ReasonRiskTransferred ReasonType = "RiskTransferred"
	ReasonRiskAvoided     ReasonType = "RiskAvoided"
	ReasonRiskMitigated   ReasonType = "RiskMitigated"
	ReasonRiskOwned       ReasonType = "RiskOwned"
	ReasonRiskNotRelevant ReasonType = "RiskNotRelevant"
	ReasonCustom          ReasonType = "Custom"
)

func ReasonTypeFromString(value string) (ReasonType, error) {
	t := ReasonType(value)
	switch t {
	case ReasonRiskTransferred, ReasonRiskAvoided, ReasonRiskMitigated, ReasonRiskOwned, ReasonRiskNotRelevant, ReasonCustom:
		return t, nil
	default:
		return "", fmt.Errorf("unsupported reason type: %s", value)
	}
}

const (
	StatusActive  StatusType = "active"
	StatusExpired StatusType = "expired"
)

const (
	ContextTypeImageName         ContextType = "imageName"
	ContextTypeImagePrefix       ContextType = "imagePrefix"
	ContextTypeImageSuffix       ContextType = "imageSuffix"
	ContextTypeImageNameContains ContextType = "imageNameContains"
	ContextTypeHostName          ContextType = "hostName"
	ContextTypeHostNameContains  ContextType = "hostNameContains"
	ContextTypePackageName       ContextType = "packageName"
	ContextTypePackageVersion    ContextType = "packageVersion"
)

type AcceptVulnerabilityRiskRequest struct {
	EntityType     EntityType                       `json:"entityType"`
	EntityValue    string                           `json:"entityValue"`
	Reason         ReasonType                       `json:"reason"`
	Description    string                           `json:"description"`
	ExpirationDate string                           `json:"expirationDate,omitempty"`
	Context        []AcceptVulnerabilityRiskContext `json:"context"`
	Stages         []StageType                      `json:"stages,omitempty"`
}

type UpdateAcceptVulnerabilityRiskRequest struct {
	ID             string     `json:"id"`
	ExpirationDate string     `json:"expirationDate,omitempty"`
	Reason         ReasonType `json:"reason"`
	Description    string     `json:"description"`
}

type AcceptVulnerabilityRisk struct {
	ID             string                           `json:"id"`
	EntityType     EntityType                       `json:"entityType"`
	EntityValue    string                           `json:"entityValue"`
	Reason         ReasonType                       `json:"reason"`
	Description    string                           `json:"description"`
	ExpirationDate string                           `json:"expirationDate,omitempty"`
	Status         StatusType                       `json:"status"`
	CreatedAt      time.Time                        `json:"createdAt,omitempty"`
	UpdatedAt      time.Time                        `json:"updatedAt,omitempty"`
	CreatedBy      string                           `json:"createdBy,omitempty"`
	UpdatedBy      string                           `json:"updatedBy,omitempty"`
	Context        []AcceptVulnerabilityRiskContext `json:"context"`
	Stages         []StageType                      `json:"stages,omitempty"`
}

type AcceptVulnerabilityRiskContext struct {
	ContextType  ContextType `json:"contextType"`
	ContextValue string      `json:"contextValue"`
}
