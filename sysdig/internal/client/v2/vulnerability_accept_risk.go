package v2

import (
	"context"
	"fmt"
	"net/http"
)

const (
	acceptVulnerabilityRiskCreatePath = "%s/secure/vulnerability/v1beta1/accepted-risks"
	acceptVulnerabilityRiskGetPath    = "%s/secure/vulnerability/v1beta1/accepted-risks/%s"
	acceptVulnerabilityRiskDeletePath = "%s/secure/vulnerability/v1beta1/accepted-risks/%s"
	acceptVulnerabilityRiskUpdatePath = "%s/secure/vulnerability/v1beta1/accepted-risks/%s"
)

type PostureVulnerabilityAcceptRiskInterface interface {
	Base

	SaveAcceptVulnerabilityRisk(ctx context.Context, p *AcceptVulnerabilityRiskRequest) (*AcceptVulnerabilityRisk, int, error)
	GetAcceptanceVulnerabilityRiskByID(ctx context.Context, id string) (*AcceptVulnerabilityRisk, int, error)
	DeleteAcceptanceVulnerabilityRisk(ctx context.Context, id string) error
	UpdateAcceptanceVulnerabilityRisk(ctx context.Context, p *UpdateAcceptVulnerabilityRiskRequest) (*AcceptVulnerabilityRisk, int, error)
}

func (c *Client) SaveAcceptVulnerabilityRisk(ctx context.Context, p *AcceptVulnerabilityRiskRequest) (risk *AcceptVulnerabilityRisk, statusCode int, err error) {
	payload, err := Marshal(p)
	if err != nil {
		return nil, 0, err
	}

	response, err := c.requester.Request(ctx, http.MethodPost, fmt.Sprintf(acceptVulnerabilityRiskCreatePath, c.config.url), payload)
	if err != nil {
		return nil, 0, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusCreated {
		return nil, response.StatusCode, c.ErrorFromResponse(response)
	}

	resp, err := Unmarshal[AcceptVulnerabilityRisk](response.Body)
	if err != nil {
		return nil, 0, err
	}

	return &resp, 0, nil
}

func (c *Client) GetAcceptanceVulnerabilityRiskByID(ctx context.Context, id string) (risk *AcceptVulnerabilityRisk, statusCode int, err error) {
	response, err := c.requester.Request(ctx, http.MethodGet, fmt.Sprintf(acceptVulnerabilityRiskGetPath, c.config.url, id), nil)
	if err != nil {
		return nil, 0, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return nil, response.StatusCode, c.ErrorFromResponse(response)
	}

	resp, err := Unmarshal[AcceptVulnerabilityRisk](response.Body)
	if err != nil {
		return nil, 0, err
	}

	return &resp, 0, nil
}

func (c *Client) DeleteAcceptanceVulnerabilityRisk(ctx context.Context, id string) (err error) {
	response, err := c.requester.Request(ctx, http.MethodDelete, fmt.Sprintf(acceptVulnerabilityRiskDeletePath, c.config.url, id), nil)
	if err != nil {
		return err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusNoContent {
		return c.ErrorFromResponse(response)
	}

	return nil
}

func (c *Client) UpdateAcceptanceVulnerabilityRisk(ctx context.Context, p *UpdateAcceptVulnerabilityRiskRequest) (risk *AcceptVulnerabilityRisk, statusCode int, err error) {
	payload, err := Marshal(p)
	if err != nil {
		return nil, 0, err
	}

	response, err := c.requester.Request(ctx, http.MethodPut, fmt.Sprintf(acceptVulnerabilityRiskUpdatePath, c.config.url, p.ID), payload)
	if err != nil {
		return nil, 0, err
	}
	defer func() {
		if dErr := response.Body.Close(); dErr != nil {
			err = fmt.Errorf("unable to close response body: %w", dErr)
		}
	}()

	if response.StatusCode != http.StatusOK {
		return nil, response.StatusCode, c.ErrorFromResponse(response)
	}

	resp, err := Unmarshal[AcceptVulnerabilityRisk](response.Body)
	if err != nil {
		return nil, 0, err
	}

	return &resp, 0, nil
}
