package secure

import (
	"context"
	"fmt"
	"io"
	"net/http"
)

func (client *sysdigSecureClient) CreateVulnerabilityExceptionList(ctx context.Context, list *VulnerabilityExceptionList) (*VulnerabilityExceptionList, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodPost, client.getVulnerabilityExceptionListURL(), list.ToJSON())
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionListFromJSON(body), nil
}

func (client *sysdigSecureClient) GetVulnerabilityExceptionListByID(ctx context.Context, id string) (*VulnerabilityExceptionList, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodGet, client.getVulnerabilityExceptionListByIDURL(id), nil)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionListFromJSON(body), nil
}

func (client *sysdigSecureClient) DeleteVulnerabilityExceptionList(ctx context.Context, id string) error {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodDelete, client.getVulnerabilityExceptionListByIDURL(id), nil)
	if err != nil {
		return err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK && response.StatusCode != http.StatusNotFound {
		return errorFromResponse(response)
	}

	return nil
}

func (client *sysdigSecureClient) UpdateVulnerabilityExceptionList(ctx context.Context, list *VulnerabilityExceptionList) (*VulnerabilityExceptionList, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodPut, client.getVulnerabilityExceptionListByIDURL(list.ID), list.ToJSON())
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionListFromJSON(body), nil
}

func (client *sysdigSecureClient) CreateVulnerabilityException(ctx context.Context, listID string, exception *VulnerabilityException) (*VulnerabilityException, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodPost, client.getVulnerabilityExceptionURL(listID), exception.ToJSON())
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionFromJSON(body), nil
}

func (client *sysdigSecureClient) GetVulnerabilityExceptionByID(ctx context.Context, listID string, exceptionID string) (*VulnerabilityException, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodGet, client.getVulnerabilityExceptionByIDURL(listID, exceptionID), nil)
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionFromJSON(body), nil
}

func (client *sysdigSecureClient) DeleteVulnerabilityException(ctx context.Context, listID string, exceptionID string) error {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodDelete, client.getVulnerabilityExceptionByIDURL(listID, exceptionID), nil)
	if err != nil {
		return err
	}
	defer response.Body.Close()

	// We will ignore the 404 error, because the exception may have been removed if the exception list has been
	// removed as well. This should not affect the user, because removing a non existing exception has no effect.
	if response.StatusCode != http.StatusNoContent && response.StatusCode != http.StatusOK && response.StatusCode != http.StatusNotFound {
		return errorFromResponse(response)
	}

	return nil
}

func (client *sysdigSecureClient) UpdateVulnerabilityException(ctx context.Context, listID string, exception *VulnerabilityException) (*VulnerabilityException, error) {
	response, err := client.doSysdigSecureRequest(ctx, http.MethodPut, client.getVulnerabilityExceptionByIDURL(listID, exception.ID), exception.ToJSON())
	if err != nil {
		return nil, err
	}
	defer response.Body.Close()

	if response.StatusCode != http.StatusOK && response.StatusCode != http.StatusCreated {
		return nil, errorFromResponse(response)
	}

	body, _ := io.ReadAll(response.Body)
	return VulnerabilityExceptionFromJSON(body), nil
}

func (client *sysdigSecureClient) getVulnerabilityExceptionListURL() string {
	return fmt.Sprintf("%s/api/scanning/v1/vulnexceptions", client.URL)
}

func (client sysdigSecureClient) getVulnerabilityExceptionListByIDURL(id string) string {
	return fmt.Sprintf("%s/api/scanning/v1/vulnexceptions/%s", client.URL, id)
}

func (client *sysdigSecureClient) getVulnerabilityExceptionURL(listID string) string {
	return fmt.Sprintf("%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities", client.URL, listID)
}

func (client *sysdigSecureClient) getVulnerabilityExceptionByIDURL(listID, ID string) string {
	return fmt.Sprintf("%s/api/scanning/v1/vulnexceptions/%s/vulnerabilities/%s/", client.URL, listID, ID)
}
