package sysdig

import (
	"context"
	"fmt"
	"strings"
	"time"

	v2 "github.com/draios/terraform-provider-sysdig/sysdig/internal/client/v2"

	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceSysdigSecureVulnerabilityException() *schema.Resource {
	timeout := 5 * time.Minute

	return &schema.Resource{
		DeprecationMessage: "The legacy scanning engine has been deprecated. This resource will be removed in future releases.",
		CreateContext:      resourceSysdigVulnerabilityExceptionCreate,
		ReadContext:        resourceSysdigVulnerabilityExceptionRead,
		UpdateContext:      resourceSysdigVulnerabilityExceptionUpdate,
		DeleteContext:      resourceSysdigVulnerabilityExceptionDelete,
		Importer: &schema.ResourceImporter{
			StateContext: func(ctx context.Context, data *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
				parts := strings.SplitN(data.Id(), "/", 2)
				if len(parts) != 2 || parts[0] == "" || parts[1] == "" {
					return nil, fmt.Errorf("unexpected format of ID (%s), expected listID:exceptionID", data.Id())
				}

				_ = data.Set("list_id", parts[0])
				data.SetId(parts[1])

				return []*schema.ResourceData{data}, nil
			},
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(timeout),
			Delete: schema.DefaultTimeout(timeout),
			Update: schema.DefaultTimeout(timeout),
			Read:   schema.DefaultTimeout(timeout),
		},

		Schema: map[string]*schema.Schema{
			"enabled": {
				Type:     schema.TypeBool,
				Optional: true,
				Default:  true,
			},
			"list_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},
			"cve": {
				Type:     schema.TypeString,
				Required: true,
			},
			"expiration_date": {
				Type:     schema.TypeInt,
				Optional: true,
				Default:  0,
			},
			"notes": {
				Type:     schema.TypeString,
				Optional: true,
			},
		},
	}
}

func getSecureVulnerabilityExceptionClient(c SysdigClients) (v2.VulnerabilityExceptionInterface, error) {
	return c.sysdigSecureClientV2()
}

func vulnerabilityExceptionFromResourceData(d *schema.ResourceData) (*v2.VulnerabilityException, error) {
	exception := &v2.VulnerabilityException{
		Gate:           "vulnerabilities",
		Enabled:        d.Get("enabled").(bool),
		TriggerID:      fmt.Sprintf("%s+*", d.Get("cve").(string)),
		ExpirationDate: nil,
		Notes:          d.Get("notes").(string),
	}
	if id := d.Id(); id != "" {
		exception.ID = id
	}

	if expirationDate := d.Get("expiration_date").(int); expirationDate != 0 {
		exception.ExpirationDate = &expirationDate
	}

	return exception, nil
}

func vulnerabilityExceptionToResourceData(exception *v2.VulnerabilityException, d *schema.ResourceData) error {
	if exception.ID != "" {
		d.SetId(exception.ID)
	}

	_ = d.Set("cve", strings.TrimRight(exception.TriggerID, "+*"))
	_ = d.Set("enabled", exception.Enabled)

	if exception.ExpirationDate == nil {
		_ = d.Set("expiration_date", 0)
	} else {
		_ = d.Set("expiration_date", *exception.ExpirationDate)
	}

	if exception.Notes != "" {
		_ = d.Set("notes", exception.Notes)
	}

	return nil
}

func resourceSysdigVulnerabilityExceptionCreate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureVulnerabilityExceptionClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	exception, err := vulnerabilityExceptionFromResourceData(d)
	if err != nil {
		return diag.FromErr(err)
	}

	exception, err = client.CreateVulnerabilityException(ctx, d.Get("list_id").(string), exception)
	if err != nil {
		return diag.FromErr(err)
	}

	d.SetId(exception.ID)

	return nil
}

func resourceSysdigVulnerabilityExceptionRead(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureVulnerabilityExceptionClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	exception, err := client.GetVulnerabilityExceptionByID(ctx, d.Get("list_id").(string), d.Id())
	if err != nil {
		d.SetId("")
		return diag.FromErr(err)
	}

	err = vulnerabilityExceptionToResourceData(exception, d)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceSysdigVulnerabilityExceptionDelete(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureVulnerabilityExceptionClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	err = client.DeleteVulnerabilityException(ctx, d.Get("list_id").(string), d.Id())
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

func resourceSysdigVulnerabilityExceptionUpdate(ctx context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	client, err := getSecureVulnerabilityExceptionClient(meta.(SysdigClients))
	if err != nil {
		return diag.FromErr(err)
	}

	exception, err := vulnerabilityExceptionFromResourceData(d)
	if err != nil {
		return diag.FromErr(err)
	}

	_, err = client.UpdateVulnerabilityException(ctx, d.Get("list_id").(string), exception)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}
