//go:build tf_acc_sysdig_secure || tf_acc_scanning_legacy

package sysdig_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"

	"github.com/draios/terraform-provider-sysdig/sysdig"
)

func TestAccVulnerabilityException(t *testing.T) {
	rText := func() string { return acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum) }

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			if v := os.Getenv("SYSDIG_SECURE_API_TOKEN"); v == "" {
				t.Fatal("SYSDIG_SECURE_API_TOKEN must be set for acceptance tests")
			}
		},
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) {
				return sysdig.Provider(), nil
			},
		},
		ExternalProviders: map[string]resource.ExternalProvider{
			"time": {Source: "hashicorp/time", VersionConstraint: "0.6.0"},
		},
		Steps: []resource.TestStep{
			{
				Config: vulnerabilityException(rText()),
			},
			{
				ResourceName:      "sysdig_secure_vulnerability_exception.sample",
				ImportState:       true,
				ImportStateVerify: true,
				ImportStateIdFunc: importStateVulnerabilityException("sysdig_secure_vulnerability_exception.sample"),
			},
			{
				Config: vulnerabilityExceptionMigrationToOtherList(rText()),
			},
		},
	})
}

func importStateVulnerabilityException(name string) resource.ImportStateIdFunc {
	return func(state *terraform.State) (string, error) {
		rs, ok := state.RootModule().Resources[name]
		if !ok {
			return "", fmt.Errorf("Not found: %s", name)
		}
		return fmt.Sprintf("%s/%s", rs.Primary.Attributes["list_id"], rs.Primary.ID), nil
	}
}

func vulnerabilityException(name string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_exception_list" "sample" {
  name = "TERRAFORM TEST 1 %s"
  description = "TERRAFORM TEST %s"
}

resource "time_static" "example" {
  rfc3339 = "2099-01-01T00:00:00Z"
}

resource "sysdig_secure_vulnerability_exception" "sample" {
  enabled = false
  list_id = sysdig_secure_vulnerability_exception_list.sample.id
  cve = "CVE-1234-1234"
  expiration_date = time_static.example.unix
  notes = "Example notes on why this exception is created"
}
`, name, name)
}

func vulnerabilityExceptionMigrationToOtherList(name string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_exception_list" "sample_2" {
  name = "TERRAFORM TEST 2 %s"
  description = "TERRAFORM TEST %s"
}

resource "time_static" "example" {
  rfc3339 = "2099-01-01T00:00:00Z"
}

resource "sysdig_secure_vulnerability_exception" "sample" {
  enabled = false
  list_id = sysdig_secure_vulnerability_exception_list.sample_2.id
  cve = "CVE-1234-1234"
  expiration_date = time_static.example.unix
  notes = "Example notes on why this exception is created"
}
`, name, name)
}
