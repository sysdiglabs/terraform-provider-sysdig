//go:build tf_acc_sysdig_secure || tf_acc_vulnerability_scanning

package sysdig_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/draios/terraform-provider-sysdig/sysdig"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func TestAccVulnerabilityRuleBundle(t *testing.T) {
	random := func() string { return acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum) }

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			if v := os.Getenv("SYSDIG_SECURE_API_TOKEN"); v == "" {
				t.Fatal("SYSDIG_SECURE_API_TOKEN must be set for acceptance tests")
			}
		},
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) { return sysdig.Provider(), nil },
		},
		Steps: []resource.TestStep{
			{
				Config: minimalVulnerabilityRuleBundleConfig(random()),
			},
			// {
			// 	ResourceName:      "sysdig_secure_vulnerability_rule_bundle.sample",
			// 	ImportState:       true,
			// 	ImportStateVerify: true,
			// },
		},
	})
}

func minimalVulnerabilityRuleBundleConfig(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rules {
  	image_config_label {
  		label_must_exist = "required-label"
  	}
  }
  rules {
  	image_config_label {
  		label_must_not_exist = "forbidden-label"
  	}
  }
  rules {
  	image_config_label {
  		label_must_exist_and_contain_value {
  			required_label = "required-label"
  			required_value = "required-value"
  		}
  	}
  }
}
`, suffix)
}
