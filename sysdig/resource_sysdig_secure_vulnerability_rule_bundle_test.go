//go:build tf_acc_sysdig_secure || tf_acc_vulnerability_scanning

package sysdig_test

import (
	"fmt"
	"os"
	"regexp"
	"testing"

	"github.com/draios/terraform-provider-sysdig/sysdig"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func TestAccVulnerabilityRuleBundle(t *testing.T) {
	random := func() string { return acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum) }

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			if v := os.Getenv("SYSDIG_SECURE_API_TOKEN"); v == "" {
				t.Fatal("SYSDIG_SECURE_API_TOKEN must be set for acceptance tests")
			}
		},
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) { return sysdig.Provider(), nil },
		},
		Steps: []resource.TestStep{
			{
				Config:      incorrectVulnerabilityRuleBundleConfig(random()),
				ExpectError: regexp.MustCompile("empty rule detected, you need to specify one"),
			},
			{
				Config:      incorrectVulnerabilityRuleBundleConfig2(random()),
				ExpectError: regexp.MustCompile(`No more than 1 "image_label" blocks are allowed`),
			},
			{
				Config:      incorrectVulnerabilityRuleBundleConfig3(random()),
				ExpectError: regexp.MustCompile(`no predicate has been specified for image label rule`),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_Conflict1(random()),
				ExpectError: regexp.MustCompile(`only one of.+severity_at_least.+severity_equals.+can be set`),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_Conflict2(random()),
				ExpectError: regexp.MustCompile(`only one of.+severity_at_least.+cvss_at_least.+can be set`),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_Conflict3(random()),
				ExpectError: regexp.MustCompile(`only one of.+severity_equals.+cvss_at_least.+can be set`),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_DisclosureConflict(random()),
				ExpectError: regexp.MustCompile("`disclosure_older_than_days` and `disclosure_date` are mutually exclusive"),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_FixConflict(random()),
				ExpectError: regexp.MustCompile("`fix_available` and `fix_available_since_days` are mutually exclusive"),
			},
			{
				Config:      errorVulnerabilityRuleBundleConfig_ExploitConflict(random()),
				ExpectError: regexp.MustCompile("`public_exploit_available` and `public_exploit_available_since_days` are mutually exclusive"),
			},
			{
				Config: minimalVulnerabilityRuleBundleConfig_ImageLabel(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.image_label.0.label_must_exist", "required-label"),
				),
			},
			{
				Config: minimalVulnerabilityRuleBundleConfig_Severities(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.severity_at_least", "critical"),
				),
			},
			{
				Config: singleRuleConfig_label_must_not_exist(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.image_label.0.label_must_not_exist", "forbidden-label"),
				),
			},
			{
				Config: singleRuleConfig_label_must_exist(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.image_label.0.label_must_exist", "another-required-label"),
				),
			},
			{
				Config: singleRuleConfig_label_must_exist_and_contain_value(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.image_label.0.label_must_exist_and_contain_value.0.required_label", "required-label"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.image_label.0.label_must_exist_and_contain_value.0.required_value", "required-value"),
				),
			},
			{
				Config: fullVulnerabilityRuleBundleConfig_Severities(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.severity_at_least", "high"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.disclosure_older_than_days", "90"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.package_type", "os"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.in_use", "true"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.fix_available_since_days", "30"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.public_exploit_available_since_days", "15"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.exploit_no_admin_privileges", "true"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.exploit_no_user_interaction", "true"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.exploit_network_attack_vector", "true"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.cisa_kev_in_ransomware_campaign", "true"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.cisa_kev_available_since_days", "10"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.cisa_kev_due_date_in_days", "21"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.epss_score_at_least_percentage", "80"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.epss_percentile_at_least_percentage", "90"),
				),
			},
			{
				Config: variantVulnerabilityRuleBundleConfig_SeverityEquals(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.severity_equals", "medium"),
				),
			},
			{
				Config: variantVulnerabilityRuleBundleConfig_Cvss(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.cvss_at_least", "7.5"),
				),
			},
			{
				Config: variantVulnerabilityRuleBundleConfig_DisclosureDate(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.disclosure_date.0.from", "2022-01-01"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.disclosure_date.0.to", "2022-12-31"),
				),
			},
			{
				Config: variantVulnerabilityRuleBundleConfig_PublicExploit(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.public_exploit_available", "true"),
				),
			},
			{
				Config: variantVulnerabilityRuleBundleConfig_FixAvailable(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_rule_bundle.sample", "rule.0.severities_and_threats.0.fix_available", "true"),
				),
			},
			{
				Config: fullVulnerabilityRuleBundleConfig_AllTypes(random()),
			},
			{
				ResourceName:      "sysdig_secure_vulnerability_rule_bundle.sample",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func incorrectVulnerabilityRuleBundleConfig(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {}
}
`, suffix)
}

func incorrectVulnerabilityRuleBundleConfig2(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
  	image_label {}
  	image_label {}
  }
}
`, suffix)
}

func incorrectVulnerabilityRuleBundleConfig3(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
  	image_label {}
  }
}
`, suffix)
}

func minimalVulnerabilityRuleBundleConfig_ImageLabel(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
  	image_label {
  		label_must_exist = "required-label"
  	}
  }
}
`, suffix)
}

func minimalVulnerabilityRuleBundleConfig_Severities(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      severity_at_least = "critical"
    }
  }
}
`, suffix)
}

func singleRuleConfig_label_must_not_exist(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "rule with label_must_not_exist"
  rule {
    image_label {
      label_must_not_exist = "forbidden-label"
    }
  }
}
`, suffix)
}

func singleRuleConfig_label_must_exist(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "rule with label_must_exist"
  rule {
    image_label {
      label_must_exist = "another-required-label"
    }
  }
}
`, suffix)
}

func singleRuleConfig_label_must_exist_and_contain_value(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "rule with label_must_exist_and_contain_value"
  rule {
    image_label {
      label_must_exist_and_contain_value {
        required_label = "required-label"
        required_value = "required-value"
      }
    }
  }
}
`, suffix)
}

func fullVulnerabilityRuleBundleConfig_Severities(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "Full bundle with severities_and_threats rules"

  rule {
    severities_and_threats {
      severity_at_least                   = "high"
      disclosure_older_than_days          = 90
      package_type                        = "os"
      in_use                              = true
      fix_available_since_days            = 30
      public_exploit_available_since_days = 15
      exploit_no_admin_privileges         = true
      exploit_no_user_interaction         = true
      exploit_network_attack_vector       = true
      cisa_kev_in_ransomware_campaign     = true
      cisa_kev_available_since_days       = 10
      cisa_kev_due_date_in_days           = 21
      epss_score_at_least_percentage      = 80
      epss_percentile_at_least_percentage = 90
    }
  }
}
`, suffix)
}

func variantVulnerabilityRuleBundleConfig_SeverityEquals(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      severity_equals = "medium"
    }
  }
}
`, suffix)
}

func variantVulnerabilityRuleBundleConfig_Cvss(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      cvss_at_least = 7.5
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_Conflict1(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      severity_at_least = "high"
      severity_equals   = "high"
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_Conflict2(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      severity_at_least = "high"
      cvss_at_least     = 5.0
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_Conflict3(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      severity_equals = "medium"
      cvss_at_least   = 5.0
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_DisclosureConflict(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      disclosure_older_than_days = 90
      disclosure_date {
        from = "2023-01-01"
        to   = "2023-01-31"
      }
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_FixConflict(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      fix_available = true
      fix_available_since_days = 30
    }
  }
}
`, suffix)
}

func errorVulnerabilityRuleBundleConfig_ExploitConflict(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      public_exploit_available = true
      public_exploit_available_since_days = 15
    }
  }
}
`, suffix)
}

func variantVulnerabilityRuleBundleConfig_DisclosureDate(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      disclosure_date {
        from = "2022-01-01"
        to   = "2022-12-31"
      }
    }
  }
}
`, suffix)
}

func variantVulnerabilityRuleBundleConfig_PublicExploit(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      public_exploit_available = true
    }
  }
}
`, suffix)
}

func variantVulnerabilityRuleBundleConfig_FixAvailable(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name    = "TERRAFORM TEST %s"
  rule {
    severities_and_threats {
      fix_available = true
    }
  }
}
`, suffix)
}

func fullVulnerabilityRuleBundleConfig_AllTypes(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_rule_bundle" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "Full bundle with all rule types"

  rule {
    image_label {
      label_must_not_exist = "forbidden-label"
    }
  }

  rule {
    image_label {
      label_must_exist = "another-required-label"
    }
  }

  rule {
    image_label {
      label_must_exist_and_contain_value {
        required_label = "required-label"
        required_value = "required-value"
      }
    }
  }

  rule {
    severities_and_threats {
      severity_at_least                   = "high"
      disclosure_older_than_days          = 90
      package_type                        = "os"
      in_use                              = true
      fix_available_since_days            = 30
      public_exploit_available_since_days = 15
      exploit_no_admin_privileges         = true
      exploit_no_user_interaction         = true
      exploit_network_attack_vector       = true
      cisa_kev_in_ransomware_campaign     = true
      cisa_kev_available_since_days       = 10
      cisa_kev_due_date_in_days           = 21
      epss_score_at_least_percentage      = 80
      epss_percentile_at_least_percentage = 90
    }
  }
}
`, suffix)
}
