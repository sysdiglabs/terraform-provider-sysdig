//go:build tf_acc_sysdig_secure || tf_acc_policies_aws || tf_acc_onprem_secure

package sysdig_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/draios/terraform-provider-sysdig/sysdig"
)

func TestAccMalwarePolicyDataSource(t *testing.T) {
	rText := acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum)

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			if v := os.Getenv("SYSDIG_SECURE_API_TOKEN"); v == "" {
				t.Fatal("SYSDIG_SECURE_API_TOKEN must be set for acceptance tests")
			}
		},
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) {
				return sysdig.Provider(), nil
			},
		},
		Steps: []resource.TestStep{
			{
				Config: malwarePolicyDataSource(rText),
			},
		},
	})
}

func malwarePolicyDataSource(name string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_malware_policy" "policy_1" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description %s"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    additional_hashes {
      hash         = "304ef4cdda3463b24bf53f9cdd69ad3ecdab0842e7e70e2f3cfbb9f14e1c4ae6"
    }

    ignore_hashes {
      hash         = "6ac3c336e4094835293a3fed8a4b5fedde1b5e2626d9838fed50693bba00af0e"
    }
  }

  actions {
    prevent_malware = true
  }

}
	
data "sysdig_secure_malware_policy" "policy_2" {
  name = sysdig_secure_malware_policy.policy_1.name
}
`, name, name)
}
