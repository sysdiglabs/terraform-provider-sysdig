//go:build tf_acc_sysdig_secure || tf_acc_policies_aws || tf_acc_onprem_secure

package sysdig_test

import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	"github.com/draios/terraform-provider-sysdig/sysdig"
)

func TestAccMalwarePolicy(t *testing.T) {
	rText := func() string { return acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum) }

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: preCheckAnyEnv(t, SysdigSecureApiTokenEnv),
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) {
				return sysdig.Provider(), nil
			},
		},
		Steps: []resource.TestStep{
			{
				Config: malwarePolicyWithName(rText()),
			},
			{
				Config: malwarePolicyWithoutAnyHashes(rText()),
			},
			{
				Config: malwarePolicyWithoutAdditionalHashes(rText()),
			},
			{
				Config: malwarePolicyWithoutIgnoreHashes(rText()),
			},
			{
				Config: malwarePolicyWithAllActions(rText()),
			},
			{
				Config: malwarePolicyWithoutNotificationChannel(rText()),
			},
		},
	})
}

func malwarePolicyWithName(name string) string {
	return fmt.Sprintf(`
%s

resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    additional_hashes {
      hash         = "304ef4cdda3463b24bf53f9cdd69ad3ecdab0842e7e70e2f3cfbb9f14e1c4ae6"
    }

    ignore_hashes {
      hash         = "6ac3c336e4094835293a3fed8a4b5fedde1b5e2626d9838fed50693bba00af0e"
    }
  }

  actions {
    prevent_malware = true
    container       = "stop"
  }

  notification_channels = [sysdig_secure_notification_channel_email.sample_email.id]
}

`, secureNotificationChannelEmailWithName(name), name)
}

func malwarePolicyWithoutAdditionalHashes(name string) string {
	return fmt.Sprintf(`
%s

resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    ignore_hashes {
      hash         = "6ac3c336e4094835293a3fed8a4b5fedde1b5e2626d9838fed50693bba00af0e"
    }
  }

  actions {
    prevent_malware = true
    container       = "stop"
  }

  notification_channels = [sysdig_secure_notification_channel_email.sample_email.id]
}

`, secureNotificationChannelEmailWithName(name), name)
}

func malwarePolicyWithoutIgnoreHashes(name string) string {
	return fmt.Sprintf(`
%s

resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    additional_hashes {
      hash         = "304ef4cdda3463b24bf53f9cdd69ad3ecdab0842e7e70e2f3cfbb9f14e1c4ae6"
    }
  }

  actions {
    prevent_malware = true
    container       = "stop"
  }

  notification_channels = [sysdig_secure_notification_channel_email.sample_email.id]
}

`, secureNotificationChannelEmailWithName(name), name)
}

func malwarePolicyWithoutAnyHashes(name string) string {
	return fmt.Sprintf(`
%s

resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"
    use_managed_hashes = true
  }

  actions {
    prevent_malware = true
  }

  notification_channels = [sysdig_secure_notification_channel_email.sample_email.id]
}

`, secureNotificationChannelEmailWithName(name), name)
}

func malwarePolicyWithAllActions(name string) string {
	return fmt.Sprintf(`
%s

resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    additional_hashes {
      hash         = "304ef4cdda3463b24bf53f9cdd69ad3ecdab0842e7e70e2f3cfbb9f14e1c4ae6"
    }

    ignore_hashes {
      hash         = "6ac3c336e4094835293a3fed8a4b5fedde1b5e2626d9838fed50693bba00af0e"
    }
  }

  actions {
    prevent_malware = true
    container       = "stop"
    capture {
      seconds_before_event = 5
      seconds_after_event  = 10
      name                 = "testcapture"
    }

  }

  notification_channels = [sysdig_secure_notification_channel_email.sample_email.id]
}

`, secureNotificationChannelEmailWithName(name), name)
}

func malwarePolicyWithoutNotificationChannel(name string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_malware_policy" "sample" {
  name        = "Test Malware Policy %s"
  description = "Test Malware Policy Description"
  enabled     = true
  severity    = 4

  rule {
    description = "Test Malware Rule Description"

    use_managed_hashes = true

    additional_hashes {
      hash         = "304ef4cdda3463b24bf53f9cdd69ad3ecdab0842e7e70e2f3cfbb9f14e1c4ae6"
    }

    ignore_hashes {
      hash         = "6ac3c336e4094835293a3fed8a4b5fedde1b5e2626d9838fed50693bba00af0e"
    }
  }

  actions {
    prevent_malware = true
    container       = "stop"
  }

}

`, name)
}
