//go:build tf_acc_sysdig_secure || tf_acc_vulnerability_scanning

package sysdig_test

import (
	"fmt"
	"os"
	"testing"

	"github.com/draios/terraform-provider-sysdig/sysdig"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func TestAccVulnerabilityPolicy(t *testing.T) {
	random := func() string { return acctest.RandStringFromCharSet(10, acctest.CharSetAlphaNum) }

	resource.ParallelTest(t, resource.TestCase{
		PreCheck: func() {
			if v := os.Getenv("SYSDIG_SECURE_API_TOKEN"); v == "" {
				t.Fatal("SYSDIG_SECURE_API_TOKEN must be set for acceptance tests")
			}
		},
		ProviderFactories: map[string]func() (*schema.Provider, error){
			"sysdig": func() (*schema.Provider, error) { return sysdig.Provider(), nil },
		},
		Steps: []resource.TestStep{
			{
				Config: minimalVulnerabilityPolicyConfig(random()),
			},
			{
				Config: vulnerabilityPolicyConfig(random()),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_policy.sample", "bundles.#", "1"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_policy.sample", "bundles.0", "1"),
					resource.TestCheckResourceAttr("sysdig_secure_vulnerability_policy.sample", "stages.#", "3"),
				),
			},
			{
				ResourceName:      "sysdig_secure_vulnerability_policy.sample",
				ImportState:       true,
				ImportStateVerify: true,
			},
		},
	})
}

func minimalVulnerabilityPolicyConfig(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_policy" "sample" {
  name    = "TERRAFORM TEST %s"
  bundles = [ "1" ]
}
`, suffix)
}

func vulnerabilityPolicyConfig(suffix string) string {
	return fmt.Sprintf(`
resource "sysdig_secure_vulnerability_policy" "sample" {
  name        = "TERRAFORM TEST %s"
  description = "Acceptance test for bundles as ordered list %s"

  bundles = [ "1" ]

  stages {
    name = "pipeline"
    configuration {
      scope = "pullstring = \"foobar\""
    }
  }
  stages {
    name = "registry"
    configuration {
      scope = "pullstring != \"foobar\""
    }
  }
  stages {
    name = "runtime"
    configuration {
      scope = "agent.tag.cluster = \"my-cluster\""
    }
  }
}
`, suffix, suffix)
}
